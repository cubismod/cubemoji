# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
image: docker:20.10.13

variables:
  # When you use the dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  GIT_SUBMODULE_STRATEGY: "recursive"
  # CM_BOTOWNER: $CM_BOTOWNER
  # CM_BROKEN: $CM_BROKEN
  # CM_ENVIRONMENT: $CM_ENVIRONMENT
  # CM_EXTEMOJI: $CM_EXTEMOJI
  # CM_HTTP_HOST: $CM_HTTP_HOST
  # CM_HTTP_PORT: $CM_HTTP_PORT
  # CM_TOKEN: $CM_TOKEN
  # CM_URL: $CM_URL
  # CM_WORKERS: $CM_WORKERS
  FLY_API_TOKEN: $FLY_API_TOKEN
  REPO_NAME: "quay.io/cubismod/cubemoji"
  SETTINGS__GITLAB_ACCESS_TOKEN: $SETTINGS__GITLAB_ACCESS_TOKEN
  DEPENDABOT_IMAGE: docker.io/andrcuns/dependabot-gitlab:0.16.0


services:
  - docker:20.10.13-dind
stages:
- build 
- test
- maintain
- deploy
build:
  stage: build
  tags:
    - cubemoji
  script:
  - docker pull $REPO_NAME:latest || true
  - docker build --cache-from $REPO_NAME:latest --tag $REPO_NAME:$CI_COMMIT_SHA --tag $REPO_NAME:latest .
  - docker push $REPO_NAME:$CI_COMMIT_SHA
  - docker push $REPO_NAME:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'

sast:
  variables:
    SAST_EXCLUDED_ANALYZERS: bandit, brakeman, flawfinder, gosec, kubesec, phpcs-security-audit,
      pmd-apex, security-code-scan, sobelow, spotbugs, semgrep,  retire-js-dependency_scanning
  stage: test


# only deploy when a new tag is created
deploy:
  stage: deploy
    tags:
    - cubemoji
  rules:
    - if: '$CI_COMMIT_TAG'
  before_script:
    - apk add --no-cache curl
    - curl -L https://fly.io/install.sh | sh
  script:
    - /root/.fly/bin/flyctl deploy -a cubemoji --detach -i $REPO_NAME --now


# dependabot setup
# https://gitlab.com/dependabot-gitlab/dependabot-standalone
.dependabot-gitlab:
  stage: maintain
  image:
    name: $DEPENDABOT_IMAGE
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    RAILS_ENV: production
    SECRET_KEY_BASE: key
    PACKAGE_MANAGER: $CI_JOB_NAME
    SETTINGS__GITLAB_URL: $CI_SERVER_URL
    SETTINGS__STANDALONE: "true"
    SETTINGS__LOG_COLOR: "true"
  rules:
    - if: $DEPENDENCY_UPDATES_DISABLED
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  script:
    - cd /home/dependabot/app
    - bundle exec rake "dependabot:update[$PROJECT_PATH,$PACKAGE_MANAGER,$DIRECTORY]"

bundler:
  extends: .dependabot-gitlab

npm:
  extends: .dependabot-gitlab

docker:
  extends: .dependabot-gitlab


include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
- project: 'dependabot-gitlab/dependabot-standalone'
  file: '.gitlab-ci.yml'